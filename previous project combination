#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <Eigen/Dense>
#include <vector>
#include <MathGeoLib.h>
#include <cmath>
#include <time.h>      
#include "MyMatrix.h"


using namespace std;
using namespace Eigen;


#define N 10002
#define M 20000
#define f 10 //change to 175 for all frames 
#define k 50 //arbitrary limit


void DeleteDoubles(std::vector<int> &NeighbourVerts, std::vector<int> &NeighbourRingIndex);
void quickSort(std::vector<float> &arr, std::vector<int> &indices, int left, int right);
void SimpleStoreNeighbourVerts(Matrix<int, Dynamic, Dynamic> Tr, int P_index, std::vector<int> &NeighbourVerts);
float square(float a);
void WriteMatToFile();

int main(int argc, char* argv[])
{
	string line;
	Matrix<float, Dynamic, Dynamic> D;
	Matrix<int, Dynamic, Dynamic> Tr;
	Matrix<float, Dynamic, Dynamic> DeltaCoord;
	Matrix<float, Dynamic, Dynamic> DeltaSent;
	Matrix<float, Dynamic, Dynamic> AnchorPoints;

	//Matrix<float, Dynamic, Dynamic> In;
	Matrix<float, Dynamic, Dynamic> C;
	Matrix<float, Dynamic, Dynamic> D_;
	Matrix<float, Dynamic, Dynamic> L;
	Matrix<float, Dynamic, Dynamic> A;
	Matrix<float, Dynamic, Dynamic> b;
	Matrix<float, Dynamic, Dynamic> x;
	Matrix<float, Dynamic, Dynamic> Dresult;

	Matrix<float, Dynamic, Dynamic> A1;
	Matrix<float, Dynamic, Dynamic> A2;
	Matrix<float, Dynamic, Dynamic> F1;
	Matrix<float, Dynamic, Dynamic> F2;
	Matrix<float, Dynamic, Dynamic> E1;
	Matrix<float, Dynamic, Dynamic> E2;
	Matrix<float, Dynamic, Dynamic> temp;

	vector<int> NeighbourVerts;
	vector<float> sortedDelta;
	vector<int> DeltaInds;
	vector<int> DeltaSentInds;
	vector<int> AnchorInds;


	D.resize(3 * f, N);					//all verts
	Tr.resize(3, M);					//all triangles
	DeltaCoord.resize(3, N);			//first frame delta coordinates

	//In.resize(N, N); //identity matrix
	//D_.resize(N, N);  //diagonal matrix
	//C.resize(N, N);  //connectivity matrix
	//L.resize(N, N);  //Laplacian matrix

	srand(time(NULL));


	/////////////////////////////////////for inversion
	vector<double> Ddiagonal;
	vector<vector<int>> Csparse;
	/////////////////////////////////////


	//Load from files
	{
		ifstream myfileX("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\VertsX.txt");
		if (myfileX)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileX, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i, j) = v;
				}
			}
			myfileX.close();
		}
		else std::cout << "fooey\n";

		ifstream myfileY("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\VertsY.txt");
		if (myfileY)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileY, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i + 1, j) = v;
				}
			}
			myfileY.close();
		}
		else std::cout << "fooey\n";

		ifstream myfileZ("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\VertsZ.txt");
		if (myfileZ)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileZ, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i + 2, j) = v;
				}
			}
			myfileZ.close();
		}
		else std::cout << "fooey\n";

		ifstream myfile1("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Tris1.txt");
		if (myfile1)
		{
			for (int j = 0; j < M; j++)
			{
				(getline(myfile1, line));
				int v;
				string s;

				v = stoi(line);

				Tr(0, j) = v - 1; //in the file indexing starts from 1 instead of 0
			}
			myfile1.close();
		}
		else std::cout << "fooey\n";

		ifstream myfile2("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Tris2.txt");
		if (myfile2)
		{
			for (int j = 0; j < M; j++)
			{
				(getline(myfile2, line));
				int v;
				string s;

				v = stoi(line);

				Tr(1, j) = v - 1; //in the file indexing starts from 1 instead of 0
			}
			myfile2.close();
		}
		else std::cout << "fooey\n";

		ifstream myfile3("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Tris3.txt");
		if (myfile3)
		{
			for (int j = 0; j < M; j++)
			{
				(getline(myfile3, line));
				int v;
				string s;

				v = stoi(line);

				Tr(2, j) = v - 1; //in the file indexing starts from 1 instead of 0
			}
			myfile3.close();
		}
		else std::cout << "fooey\n";
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	
		//ENCODER

		{
			//determine features
			for (int i = 0; i < N; i++)
			{
				SimpleStoreNeighbourVerts(Tr, i, NeighbourVerts);
				//D_(i, i) = NeighbourVerts.size();
				Ddiagonal.push_back(NeighbourVerts.size());

				for (int j = 0; j < NeighbourVerts.size(); j++)
				{
					//C(i, NeighbourVerts[j]) = 1;
					Csparse.push_back(NeighbourVerts);
				}

				vec Mean(0, 0, 0);
				vec Point(D(0, i), D(1, i), D(2, i));

				for (int j = 0; j < NeighbourVerts.size(); j++)
				{
					vec temp(D(0, NeighbourVerts[j]), D(1, NeighbourVerts[j]), D(2, NeighbourVerts[j]));
					Mean += temp;
				}

				DeltaCoord(0, i) = Point.x - (Mean.x / NeighbourVerts.size());
				DeltaCoord(1, i) = Point.y - (Mean.y / NeighbourVerts.size());
				DeltaCoord(2, i) = Point.z - (Mean.z / NeighbourVerts.size());

				sortedDelta.push_back(vec(DeltaCoord(0, i), DeltaCoord(1, i), DeltaCoord(2, i)).LengthSq());
				DeltaInds.push_back(i);
				NeighbourVerts.clear();
			}
			quickSort(sortedDelta, DeltaInds, 0, N - 1);

			Tr.resize(0, 0);
			DeltaCoord.resize(0, 0);
			sortedDelta.clear();

			////invert D_
			//for (int i = 0; i < N; i++) 
			//{
			//	row.clear();
			//	for (int j = 0; j < N; j++) 
			//	{

			//		row.push_back(D_(i,j));
			//	}
			//	m.push_back(row);
			//}

			vector<vector<double> > result;
			result = MyMatrix::inverse(Ddiagonal);//10.5 mins

			//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!cannot calculate inverse due to space requirements!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//try writing stuff in files and loading the files to access data

			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			//create Laplacian matrix	L = L - D_^(-1) * C;
			L.resize(N, N);
			for (int i = 0; i < N; i++)
				for (int j = 0; j < N; j++)
				{
					if (i == j)
						L(i, j) = 1;
					else
						L(i, j) = 0;
				}

			for (int i = 0; i < N; i++) 
			{
				for(int j = 0; j < Csparse[i].size(); j++)
				{
					L(i, Csparse[i][j]) -= result[i][i];	//D^-1 * 1 if C has neighbour there
				}
			}

			result.clear();
			

			//resize for memory management
			//In.resize(0, 0);
			//D_.resize(0, 0);
			C.resize(N, N);
			DeltaSent.resize(3 * f, k);			//k delta coordinates per frame
			AnchorPoints.resize(3 * f, k);		//k anchor points per frame

			//create full C matrix for later reference 
			for (int i = 0; i < N; i++)
				for (int j = 0; j < N; j++)
				{
					C(i, j) = 0;
				}

			for (int i = 0; i < N; i++)
				for (int j = 0; j < Csparse[i].size(); j++)
					C(i, Csparse[i][j]) = 1;



			//calculate and store important delta coordinates
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < k; j++)
				{
					vec Delta;
					vec Mean(0, 0, 0);
					vec Point(D(3 * i + 0, DeltaInds[N - 1 - j]), D(3 * i + 1, DeltaInds[N - 1 - j]), D(3 * i + 2, DeltaInds[N - 1 - j]));

					int counter = 0;
					for (int u = 0; u < N; u++)
					{
						if (C(DeltaInds[N - 1 - j], u))
						{
							vec temp(D(3 * f, DeltaInds[N - 1 - j]), D(3 * f + 1, DeltaInds[N - 1 - j]), D(3 * f + 2, DeltaInds[N - 1 - j]));
							Mean += temp;
							counter++;
						}
					}
					DeltaSent(3 * i + 0, j) = Point.x - (Mean.x / counter);
					DeltaSent(3 * i + 1, j) = Point.y - (Mean.y / counter);
					DeltaSent(3 * i + 2, j) = Point.z - (Mean.z / counter);

					DeltaSentInds.push_back(DeltaInds[N - 1 - j]);
				}
			}


			//resize
			C.resize(0, 0);
			DeltaCoord.resize(0, 0);
			A1.resize(3 * f, 3 * f);			//A of deltas
			A2.resize(3 * f, 3 * f);			//A of anchor points
			E1.resize(3 * f, k);
			E2.resize(3 * f, k);
			F1.resize(k, k);
			F2.resize(k, k);


			//PCA for delta coordinates
			A1 = DeltaSent * DeltaSent.transpose() / (3 * f);
			BDCSVD<MatrixXf> svd1(A1, ComputeFullU);
			temp.resize(3 * f, 3 * f);
			temp = svd1.matrixU();

			for (int i = 0; i < 3 * f; i++)
			{
				for (int j = 0; j < k; j++)
				{
					E1(3 * i, j) = temp(3 * i, j);
				}
			}
			F1 = E1.transpose() * DeltaSent;


			//choose random anchor points
			for (int i = 0; i < k; i++)
			{
				int v = rand() % N;		// v1 in the range 0 to N-1
				for (int j = 0; j < f; j++)
				{
					AnchorPoints(3 * j + 0, i) = D(3 * j + 0, v);
					AnchorPoints(3 * j + 1, i) = D(3 * j + 1, v);
					AnchorPoints(3 * j + 2, i) = D(3 * j + 2, v);
				}
				AnchorInds.push_back(v);
			}

			//PCA for anchor points
			A2 = AnchorPoints * AnchorPoints.transpose() / (3 * f);
			BDCSVD<MatrixXf> svd2(A2, ComputeFullU);
			temp.resize(3 * f, 3 * f);
			temp = svd2.matrixU();

			for (int i = 0; i < 3 * f; i++)
			{
				for (int j = 0; j < k; j++)
				{
					E2(3 * i, j) = temp(3 * i, j);
				}
			}
			F2 = E2.transpose() * AnchorPoints;
		}

		//resize
		A1.resize(0, 0);
		A2.resize(0, 0);



		//DECODER 

		{
			//receive F1, E1, F2, E2, DeltaSentInds, AnchorInds
			DeltaSent = E1 * F1;
			AnchorPoints = E2 * F2;

			//reconstruction
			A.resize(N + k, N);
			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < N; j++)
				{
					A(j, i) = L(j, i);
				}

				for (int j = N; j < N + k; j++)
				{
					A(j, i) = 0;
				}

				for (int j = 0; j < k; j++)
				{
					A(j + N, AnchorInds[j]) = 1;
				}
			}

			L.resize(0, 0);
			b.resize(N + k, 3 * f);

			for (int i = 0; i < N + k; i++)
			{
				for (int j = 0; j < N; j++)
				{
					b(i, j) = 0;
				}
			}

			for (int i = 0; i < k; i++)
			{
				for (int j = 0; j < f; j++)
				{
					b(DeltaSentInds[i], 3 * f + 0) = DeltaSent(3 * f + 0, i);
					b(DeltaSentInds[i], 3 * f + 1) = DeltaSent(3 * f + 1, i);
					b(DeltaSentInds[i], 3 * f + 2) = DeltaSent(3 * f + 2, i);

					b(AnchorInds[i], 3 * f + 0) = AnchorPoints(3 * f + 0, i);
					b(AnchorInds[i], 3 * f + 1) = AnchorPoints(3 * f + 1, i);
					b(AnchorInds[i], 3 * f + 2) = AnchorPoints(3 * f + 2, i);
				}
			}

			DeltaSent.resize(0, 0);
			x.resize(N, 3 * f);
			x = (A.transpose() * A).inverse() * A.transpose() * b;
			b.resize(0, 0);
			A.resize(0, 0);
			temp.resize(N, 3 * f);
			temp = x;
			x.resize(3 * f, N);
			x = temp.transpose();

			std::vector<float> test;
			for (int i = 0; i < N; i++)
				test.push_back(x(1, i));


			//calculate error
			float Err = 0;
			for (int i = 0; i < 3 * f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					Err += square(D(i, j) - x(i, j));
				}
			}
		}
	


	std::cin.get();
	return 0;
}



//takes as input the index to a point and stores the indices to its neighbors
void SimpleStoreNeighbourVerts(Matrix<int, Dynamic, Dynamic> Tr, int P_index, std::vector<int> &NeighbourVerts)
{
	int CurrentFrame = 0;
	NeighbourVerts.clear();

	for (int i = 0; i < M; i++)
	{
		if (Tr(3 * CurrentFrame + 0, i) == P_index)
		{
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 1, i));
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 2, i));
		}

		if (Tr(3 * CurrentFrame + 1, i) == P_index)
		{
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 0, i));
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 2, i));
		}

		if (Tr(3 * CurrentFrame + 2, i) == P_index)
		{
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 0, i));
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 1, i));
		}
	}


	//deletes doubles
	for (int i = 0; i < NeighbourVerts.size(); i++)
	{
		for (int j = i; j < NeighbourVerts.size(); j++)
		{
			if (i != j && NeighbourVerts[i] == NeighbourVerts[j])
			{
				NeighbourVerts.erase(NeighbourVerts.begin() + j);

				j--;
			}
			if (i >= NeighbourVerts.size() || j >= NeighbourVerts.size()) break;
		}
		if (i >= NeighbourVerts.size()) break;
	}
}

void DeleteDoubles(std::vector<int> &NeighbourVerts, std::vector<int> &NeighbourRingIndex)
{
	for (int i = 0; i < NeighbourVerts.size(); i++)
	{
		for (int j = 0; j < NeighbourVerts.size(); j++)
		{
			if (i != j && NeighbourVerts[i] == NeighbourVerts[j])
			{
				NeighbourVerts.erase(NeighbourVerts.begin() + j);
				NeighbourRingIndex.erase(NeighbourRingIndex.begin() + j);

				j = i; //on the next iteration j = i + 1 so that it rechecks list
			}
			if (i >= NeighbourVerts.size() || j >= NeighbourVerts.size()) break;
		}
		if (i >= NeighbourVerts.size()) break;
	}
}

void quickSort(std::vector<float> &arr, std::vector<int> &indices, int left, int right)
{
	int i = left, j = right;
	float tmp1;
	int tmp2;
	float pivot = arr[(left + right) / 2];



	/* partition */

	while (i <= j)
	{
		while (arr[i] < pivot)	i++;

		while (arr[j] > pivot)	j--;


		if (i <= j)
		{
			tmp1 = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp1;


			tmp2 = indices[i];
			indices[i] = indices[j];
			indices[j] = tmp2;

			i++;
			j--;
		}
	};



	/* recursion */

	if (left < j)
		quickSort(arr, indices, left, j);

	if (i < right)
		quickSort(arr, indices, i, right);

}

//square function
float square(float a)
{
	return a * a;
}

vector<vector<double> > operator/(vector<vector<double> > m, double d)
{

	for (int i = 0; i < (int)m.size(); i++) {
		for (int j = 0; j < (int)m.size(); j++) {
			m[i][j] = m[i][j] / d;
		}
	}

	return m;
}

vector<vector<double> > MyMatrix::minor1(int deleteRow, int deleteCol, vector<double> Ddiagonal)
{

	vector<vector<double> > result;
	vector<double> row;

	for (int i = 0; i < (int)Ddiagonal.size(); i++) {
		if (i == deleteRow) continue;

		row.clear();
		for (int j = 0; j < (int)Ddiagonal.size(); j++) {
			if (j == deleteCol) continue;

			if (i == j)	row.push_back(Ddiagonal[i]);
			else row.push_back((double)1);
		}
		result.push_back(row);
	}

	return result;
	//check if size returns full N*N or just N
}

vector<vector<double> > MyMatrix::minor2(int deleteRow, int deleteCol, vector<vector<double> > m)
{

	vector<vector<double> > result;
	vector<double> row;

	for (int i = 0; i < (int)m.size(); i++) {
		if (i == deleteRow) continue;

		row.clear();
		for (int j = 0; j < (int)m.size(); j++) {
			if (j == deleteCol) continue;

			row.push_back(m[i][j]);
		}
		result.push_back(row);
	}

	return result;
	//check if size returns full N*N or just N
}

double MyMatrix::det1(vector<double> Ddiagonal)
{
	if (Ddiagonal.size() == 1)
		return Ddiagonal[0];

	double sum = 0;
	int j = 0;

	for (int i = 0; i < (int)Ddiagonal.size(); i++) {
		if(i == j)
			sum += pow((double)(-1), (double)(i + j + 1)) * Ddiagonal[i] * det2(minor1(i, j, Ddiagonal));

		else
			sum += pow((double)(-1), (double)(i + j + 1)) * (double) 1 * det2(minor1(i, j, Ddiagonal));

	}

	return sum;

}

double MyMatrix::det2(vector<vector<double> > m)
{
	if (m.size() == 1)
		return m[0][0];

	double sum = 0;
	int j = 0;

	for (int i = 0; i < (int)m.size(); i++) {
		sum += pow((double)(-1), (double)(i + j + 1)) * m[i][j] * det2(minor2(i, j, m));

	}

	return sum;

}

vector<vector<double> > MyMatrix::cofactor(vector<double> Ddiagonal)
{

	vector<vector<double> > result;
	vector<double> row;

	double value;

	for (int i = 0; i < (int)Ddiagonal.size(); i++) {
		row.clear();
		for (int j = 0; j < (int)Ddiagonal.size(); j++) {
			value = pow((double)(-1), (double)(i + 1 + j)) * det2(minor1(i, j, Ddiagonal));
			row.push_back(value);
		}
		result.push_back(row);
	}

	return result;

}

vector<vector<double> > MyMatrix::transpose(vector<vector<double> > m)
{

	vector<vector<double> > result;
	result = m;

	for (int i = 0; i < (int)result.size(); i++) {
		for (int j = 0; j < (int)result.size(); j++) {
			result[j][i] = m[i][j];
		}
	}

	return result;

}

vector<vector<double> > MyMatrix::adjugate(vector<double> Ddiagonal)
{

	vector<vector<double> > result;

	result = cofactor(Ddiagonal);
	result = transpose(result);

	return result;
}

vector<vector<double> > MyMatrix::inverse(vector<double> Ddiagonal)
{

	vector<vector<double> > result;
	double det_m = det1(Ddiagonal);
	result = adjugate(Ddiagonal);

	result = result / det_m;

	return result;

}
