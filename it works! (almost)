#pragma warning(disable: 4996)
#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <Eigen/Dense>
#include <vector>
#include <MathGeoLib.h>
#include <cmath>
#include <time.h>      


using namespace std;
using namespace Eigen;


#define N 10002
#define M 20000
#define f 160  //change to 175 for all frames 
#define k 500 //arbitrary limit for anchor points and deltas (Laplacian compression)
#define n 160  //arbitrary limit for eigenvectors kept (PCA compression)


void DeleteDoubles(std::vector<int> &NeighbourVerts, std::vector<int> &NeighbourRingIndex);
void quickSort(std::vector<float> &arr, std::vector<int> &indices, int left, int right);
void SimpleStoreNeighbourVerts(Matrix<int, Dynamic, Dynamic> Tr, int P_index, std::vector<int> &NeighbourVerts);
float square(float a);
float dotProduct(vec p1, vec p2);

int main(int argc, char* argv[])
{
	string line;
	Matrix<float, Dynamic, Dynamic> D;
	Matrix<int, Dynamic, Dynamic> Tr;
	Matrix<float, Dynamic, Dynamic> DeltaCoord;
	Matrix<float, Dynamic, Dynamic> DeltaSent;
	Matrix<float, Dynamic, Dynamic> AnchorPoints;

	Matrix<float, Dynamic, Dynamic> C;
	Matrix<float, Dynamic, Dynamic> D_;
	Matrix<float, Dynamic, Dynamic> L;
	Matrix<float, Dynamic, Dynamic> A;
	Matrix<float, Dynamic, Dynamic> b;
	Matrix<float, Dynamic, Dynamic> x;
	Matrix<float, Dynamic, Dynamic> Dresult;

	Matrix<float, Dynamic, Dynamic> A1;
	Matrix<float, Dynamic, Dynamic> A2;
	Matrix<float, Dynamic, Dynamic> F1;
	Matrix<float, Dynamic, Dynamic> F2;
	Matrix<float, Dynamic, Dynamic> E1;
	Matrix<float, Dynamic, Dynamic> E2;
	Matrix<float, Dynamic, Dynamic> temp;

	vector<int> NeighbourVerts;
	vector<float> sortedDelta;
	vector<int> DeltaInds;
	vector<int> DeltaSentInds;
	vector<int> AnchorInds;


	D.resize(3 * f, N);					//all verts
	Tr.resize(3, M);					//all triangles
	DeltaCoord.resize(3, N);			//first frame delta coordinates

	//In.resize(N, N); //identity matrix
	D_.resize(N, N);  //diagonal matrix
	C.resize(N, N);  //connectivity matrix
	L.resize(N, N);  //Laplacian matrix

	srand(time(NULL));

	//Load from files
	{
		ifstream myfileX("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\VertsX.txt");
		if (myfileX)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileX, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i, j) = v;
				}
			}
			myfileX.close();
		}
		else std::cout << "fooey\n";

		ifstream myfileY("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\VertsY.txt");
		if (myfileY)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileY, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i + 1, j) = v;
				}
			}
			myfileY.close();
		}
		else std::cout << "fooey\n";

		ifstream myfileZ("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\VertsZ.txt");
		if (myfileZ)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileZ, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i + 2, j) = v;
				}
			}
			myfileZ.close();
		}
		else std::cout << "fooey\n";

		ifstream myfile1("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Tris1.txt");
		if (myfile1)
		{
			for (int j = 0; j < M; j++)
			{
				(getline(myfile1, line));
				int v;
				string s;

				v = stoi(line);

				Tr(0, j) = v - 1; //in the file indexing starts from 1 instead of 0
			}
			myfile1.close();
		}
		else std::cout << "fooey\n";

		ifstream myfile2("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Tris2.txt");
		if (myfile2)
		{
			for (int j = 0; j < M; j++)
			{
				(getline(myfile2, line));
				int v;
				string s;

				v = stoi(line);

				Tr(1, j) = v - 1; //in the file indexing starts from 1 instead of 0
			}
			myfile2.close();
		}
		else std::cout << "fooey\n";

		ifstream myfile3("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Tris3.txt");
		if (myfile3)
		{
			for (int j = 0; j < M; j++)
			{
				(getline(myfile3, line));
				int v;
				string s;

				v = stoi(line);

				Tr(2, j) = v - 1; //in the file indexing starts from 1 instead of 0
			}
			myfile3.close();
		}
		else std::cout << "fooey\n";
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////

	//ENCODER
	
	//determine features
	for (int i = 0; i < N; i++)
	{
		SimpleStoreNeighbourVerts(Tr, i, NeighbourVerts);
		D_(i, i) = NeighbourVerts.size();

		for (int j = 0; j < NeighbourVerts.size(); j++)
		{
			C(i, NeighbourVerts[j]) = 1;
		}

		vec Mean(0, 0, 0);
		vec Point(D(0, i), D(1, i), D(2, i));

		for (int j = 0; j < NeighbourVerts.size(); j++)
		{
			vec temp(D(0, NeighbourVerts[j]), D(1, NeighbourVerts[j]), D(2, NeighbourVerts[j]));
			Mean += temp;
		}

		DeltaCoord(0, i) = Point.x - (Mean.x / NeighbourVerts.size());
		DeltaCoord(1, i) = Point.y - (Mean.y / NeighbourVerts.size());
		DeltaCoord(2, i) = Point.z - (Mean.z / NeighbourVerts.size());

		sortedDelta.push_back(vec(DeltaCoord(0, i), DeltaCoord(1, i), DeltaCoord(2, i)).LengthSq());
		DeltaInds.push_back(i);
		NeighbourVerts.clear();
	}
	quickSort(sortedDelta, DeltaInds, 0, N - 1);

	Tr.resize(0, 0);
	DeltaCoord.resize(0, 0);
	sortedDelta.clear();
	DeltaSent.resize(3 * f, k);			//k delta coordinates per frame
	AnchorPoints.resize(3 * f, k);		//k anchor points per frame

	//calculate and store important delta coordinates
	for (int i = 0; i < f; i++)
	{
		for (int j = 0; j < k; j++)
		{
			vec Delta;
			vec Mean(0, 0, 0);
			vec Point(D(3 * i + 0, DeltaInds[N - 1 - j]), D(3 * i + 1, DeltaInds[N - 1 - j]), D(3 * i + 2, DeltaInds[N - 1 - j]));

			int counter = 0;
			for (int u = 0; u < N; u++)
			{
				if (C(DeltaInds[N - 1 - j], u))
				{
					vec temp(D(3 * i, DeltaInds[N - 1 - j]), D(3 * i + 1, DeltaInds[N - 1 - j]), D(3 * i + 2, DeltaInds[N - 1 - j]));
					Mean += temp;
					counter++;
				}
			}
			DeltaSent(3 * i + 0, j) = Point.x - (Mean.x / counter);
			DeltaSent(3 * i + 1, j) = Point.y - (Mean.y / counter);
			DeltaSent(3 * i + 2, j) = Point.z - (Mean.z / counter);

			DeltaSentInds.push_back(DeltaInds[N - 1 - j]);
		}
	}

	//choose random anchor points
	for (int i = 0; i < k; i++)
	{
		int v = rand() % N;		// v1 in the range 0 to N-1
		for (int j = 0; j < f; j++)
		{
			AnchorPoints(3 * j + 0, i) = D(3 * j + 0, v);
			AnchorPoints(3 * j + 1, i) = D(3 * j + 1, v);
			AnchorPoints(3 * j + 2, i) = D(3 * j + 2, v);
		}
		AnchorInds.push_back(v);
	}


	//////////////////////////////////////////////
	//Laplacian compression is completed here
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			if (i == j) L(i, j) = 1;
			else L(i, j) = 0;
		}

	D_ = D_.inverse();
	L = L - D_ * C;
	//////////////////////////////////////////////


	//resize for memory management
	D_.resize(0, 0);
	C.resize(0, 0);
	A1.resize(3 * f, 3 * f);			//A of deltas
	A2.resize(3 * f, 3 * f);			//A of anchor points
	E1.resize(3 * f, n);
	E2.resize(3 * f, n);
	F1.resize(n, k);
	F2.resize(n, k);


	//PCA for delta coordinates
	A1 = DeltaSent * DeltaSent.transpose() / (3 * f);
	BDCSVD<MatrixXf> svd1(A1, ComputeFullU);
	temp.resize(3 * f, 3 * f);
	temp = svd1.matrixU();


	for (int i = 0; i < 3 * f; i++)
	{
		for (int j = 0; j < n; j++)
		{
			E1(i, j) = temp(i, j);
		}
	}
	F1 = E1.transpose() * DeltaSent;

	//PCA for anchor points
	A2 = AnchorPoints * AnchorPoints.transpose() / (3 * f);
	BDCSVD<MatrixXf> svd2(A2, ComputeFullU);
	temp.resize(3 * f, 3 * f);
	temp = svd2.matrixU();

	for (int i = 0; i < 3 * f; i++)
	{
		for (int j = 0; j < n; j++)
		{
			E2(i, j) = temp(i, j);
		}
	}
	F2 = E2.transpose() * AnchorPoints;
	//////////////////////////////////////////////
	//PCA compression is completed 
	//////////////////////////////////////////////

	//resize
	A1.resize(0, 0);
	A2.resize(0, 0);



	//DECODER 

	{
		//receive F1, E1, F2, E2, DeltaSentInds, AnchorInds
		DeltaSent = E1 * F1;
		AnchorPoints = E2 * F2;

		//reconstruction
		A.resize(N + k, N);
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				A(j, i) = L(j, i);
			}

			for (int j = N; j < N + k; j++)
			{
				A(j, i) = 0;
			}

			for (int j = 0; j < k; j++)
			{
				A(j + N, AnchorInds[j]) = 1;
			}
		}

		//L.resize(0, 0);
		b.resize(N + k, 3 * f);

		for (int i = 0; i < N + k; i++)
		{
			for (int j = 0; j < 3 * f; j++)
			{
				b(i, j) = 0;
			}
		}

		for (int i = 0; i < k; i++)
		{
			for (int j = 0; j < f; j++)
			{
				b(DeltaSentInds[i], 3 * j + 0) = DeltaSent(3 * j + 0, i);
				b(DeltaSentInds[i], 3 * j + 1) = DeltaSent(3 * j + 1, i);
				b(DeltaSentInds[i], 3 * j + 2) = DeltaSent(3 * j + 2, i);

				b(AnchorInds[i], 3 * j + 0) = AnchorPoints(3 * j + 0, i);
				b(AnchorInds[i], 3 * j + 1) = AnchorPoints(3 * j + 1, i);
				b(AnchorInds[i], 3 * j + 2) = AnchorPoints(3 * j + 2, i);
			}
		}

		DeltaSent.resize(0, 0);
		x.resize(N, 3 * f);
		L = (A.transpose() * A);
		x = (L).inverse() * A.transpose() * b;
		b.resize(0, 0);
		A.resize(0, 0);
		temp.resize(N, 3 * f);
		temp = x;
		x.resize(3 * f, N);
		x = temp.transpose();


		//calculate error
		float Err = 0;
		int counter = 0;
		for (int i = 0; i < f; i++)
		{
			for (int j = 0; j < N; j++)
			{
				vec p1(D(3 * i, j), D(3 * i + 1, j), D(3 * i + 2, j));
				vec p2(x(3 * i, j), x(3 * i + 1, j), x(3 * i + 2, j));
				double r1 = sqrt(p1.x*p1.x + p1.y*p1.y + p1.z*p1.z);
				double r2 = sqrt(p2.x*p2.x + p2.y*p2.y + p2.z*p2.z);
				float check = Acos(dotProduct(p1, p2) / (r1 * r2));
				if (IsNan(check))
				{
					counter++;
					continue;
				}
				Err += Acos(dotProduct(p1, p2) / (r1 * r2));
				//Err += square(D(i, j) - x(i, j));
			}
		}
		Err /= (f * N - counter);
		Err *= (180 / pi);
		std::cout << Err << std::endl;
		std::cout << counter << std::endl;
	}



	std::cin.get();
	return 0;
}



//takes as input the index to a point and stores the indices to its neighbors
void SimpleStoreNeighbourVerts(Matrix<int, Dynamic, Dynamic> Tr, int P_index, std::vector<int> &NeighbourVerts)
{
	int CurrentFrame = 0;
	NeighbourVerts.clear();

	for (int i = 0; i < M; i++)
	{
		if (Tr(3 * CurrentFrame + 0, i) == P_index)
		{
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 1, i));
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 2, i));
		}

		if (Tr(3 * CurrentFrame + 1, i) == P_index)
		{
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 0, i));
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 2, i));
		}

		if (Tr(3 * CurrentFrame + 2, i) == P_index)
		{
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 0, i));
			NeighbourVerts.push_back(Tr(3 * CurrentFrame + 1, i));
		}
	}


	//deletes doubles
	for (int i = 0; i < NeighbourVerts.size(); i++)
	{
		for (int j = i; j < NeighbourVerts.size(); j++)
		{
			if (i != j && NeighbourVerts[i] == NeighbourVerts[j])
			{
				NeighbourVerts.erase(NeighbourVerts.begin() + j);

				j--;
			}
			if (i >= NeighbourVerts.size() || j >= NeighbourVerts.size()) break;
		}
		if (i >= NeighbourVerts.size()) break;
	}
}

void DeleteDoubles(std::vector<int> &NeighbourVerts, std::vector<int> &NeighbourRingIndex)
{
	for (int i = 0; i < NeighbourVerts.size(); i++)
	{
		for (int j = 0; j < NeighbourVerts.size(); j++)
		{
			if (i != j && NeighbourVerts[i] == NeighbourVerts[j])
			{
				NeighbourVerts.erase(NeighbourVerts.begin() + j);
				NeighbourRingIndex.erase(NeighbourRingIndex.begin() + j);

				j = i; //on the next iteration j = i + 1 so that it rechecks list
			}
			if (i >= NeighbourVerts.size() || j >= NeighbourVerts.size()) break;
		}
		if (i >= NeighbourVerts.size()) break;
	}
}

void quickSort(std::vector<float> &arr, std::vector<int> &indices, int left, int right)
{
	int i = left, j = right;
	float tmp1;
	int tmp2;
	float pivot = arr[(left + right) / 2];



	/* partition */

	while (i <= j)
	{
		while (arr[i] < pivot)	i++;

		while (arr[j] > pivot)	j--;


		if (i <= j)
		{
			tmp1 = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp1;


			tmp2 = indices[i];
			indices[i] = indices[j];
			indices[j] = tmp2;

			i++;
			j--;
		}
	};



	/* recursion */

	if (left < j)
		quickSort(arr, indices, left, j);

	if (i < right)
		quickSort(arr, indices, i, right);

}

//square function
float square(float a)
{
	return a * a;
}

float dotProduct(vec p1, vec p2)
{

	float product = 0;

	// Loop for calculate cot product 
	for (int i = 0; i < 3; i++)

		product = product + p1[i] * p2[i];
	return product;
}
